@model IEnumerable<Asiservy.Automatizacion.Datos.Datos.sp_Analisis_Quimico_Precoccion>
@using Asiservy.Automatizacion.Formularios.Models.Produccion;
@using Newtonsoft.Json;

@{
    var groupParametros = (from x in Model
                           where x.IdParametro != null
                           group x by new { x.IdParametro, x.NombreParametro } into g
                           select new { g.Key.IdParametro, g.Key.NombreParametro });
    int tfoot = groupParametros.Count();
    int? idParametro = 0;
    int con1 = 1;
}
<div class="table-responsive">
    <table class="table table-bordered text-uppercase table-hover" id="tblDataTables">
        <thead style="font-size:10px">
            <tr>
                <th>COCINADOR</th>
                <th>PARADA</th>
                <th>LOTE</th>
                <th>BARCO ORIGEN</th>
                <th>BARCO ASIGNADO</th>
                <th>ESP. TALLA</th>
                <th>Nº COCHE</th>
                @if (groupParametros.Any())
                {
                    foreach (var thead in groupParametros)
                    {
                        <th>@thead.NombreParametro</th>
                        if (thead.NombreParametro == "HISTAMINA")
                        {
                            idParametro = thead.IdParametro;
                            tfoot += 2;
                            <th>VALOR MAX</th>
                            <th>VALOR MIN</th>
                        }
                        else
                        {
                            tfoot++;
                            <th>PROM</th>
                        }
                    }
                }
                <th>ÁNALISTA</th>
            </tr>
        </thead>
        @{
            var listaAgrupada = (from all in ViewBag.ListaParadasCocinas as List<ItemParadaCocina>
                                 group all by new { all.COCINA, all.PARADA } into listGroup
                                 orderby listGroup.Key.PARADA
                                 select new { listGroup.Key.COCINA, listGroup.Key.PARADA });

            var goupRows = (from all in Model
                            group all by new { all.Cocinador, all.Parada, all.UsuarioIngresoLog } into listGroup
                            orderby listGroup.Key.Parada
                            select new { listGroup.Key.Cocinador, listGroup.Key.Parada, listGroup.Key.UsuarioIngresoLog });
            string[] turnoLetra = new string[] { "", "A", "B", "C", "D", "E", "F", "G" };

        }
        <tbody style="font-size:9px">
            @foreach (var row in listaAgrupada)
            {
                var existeDetalle = (from c in Model where c.Cocinador.ToString() == row.COCINA.ToString() && c.Parada == row.PARADA select c).OrderBy(x => x.Parada).FirstOrDefault();
                var listaCocinaParada = (from c in ViewBag.ListaParadasCocinas as List<ItemParadaCocina> where c.COCINA.ToString() == row.COCINA.ToString() && c.PARADA == row.PARADA select c).OrderBy(x => x.PARADA);
                if (existeDetalle != null)
                {
                    var turno = (from c in Model where int.Parse(c.Cocinador) == row.COCINA && c.Parada == row.PARADA select c).FirstOrDefault();
                    if (turno == null || turno.Turno == ViewBag.Turno)
                    {
                        <tr style="cursor:pointer">
                            <td class="text-right">@row.COCINA</td>
                            <td class="text-right">@row.PARADA</td>
                            <td>
                                @foreach (var item in listaCocinaParada)
                                {
                                    <div>@item.LOTE</div>
                                }
                            </td>
                            <td>
                                @foreach (var item in listaCocinaParada)
                                {
                                    <div>@item.BARCO</div>
                                }
                            </td>
                            <td>
                                @foreach (var item in listaCocinaParada)
                                {
                                    <div>@item.BARCO</div>
                                }
                            </td>
                            <td>
                                @foreach (var item in listaCocinaParada)
                                {
                                    <div>@item.ESPECIE - @item.TALLA</div>
                                }
                            </td>
                            <td class="text-right">
                                @foreach (var item in listaCocinaParada)
                                {
                                    int con2 = item.COCHES + con1 - 1;
                                    <div>@con1 - @con2</div>
                                    con1 = con1 + item.COCHES;
                                }
                            </td>
                            @if (groupParametros.Any())
                            {
                                foreach (var thead in groupParametros)
                                {
                                    <td class="text-right" style="background-color: rgba(165, 158, 158, 0.72);font-size:10px">
                                        @foreach (var lote in listaCocinaParada)
                                        {
                                            var groupLote = (from item in Model
                                                             where item.LoteBarco == lote.LOTE && item.Cocinador == lote.COCINA.ToString() && item.Parada == lote.PARADA && item.IdParametro == thead.IdParametro
                                                             orderby item.Parada
                                                             group item by new { item.IdElemento, item.IdParametro, item.LoteBarco, item.Valor } into x
                                                             select new { x.Key.IdElemento, x.Key.IdParametro, x.Key.LoteBarco, x.Key.Valor }).ToList();
                                            foreach (var glote in groupLote)
                                            {
                                                if (thead.IdParametro == glote.IdParametro && lote.LOTE == glote.LoteBarco)
                                                {
                                                    <div id="inputParametro_@thead.IdParametro@row.COCINA@row.PARADA@lote.LOTE">@lote.LOTE _ @glote.Valor</div>
                                                }
                                            }
                                            if (!groupLote.Any())
                                            {
                                                <div>----</div>
                                            }
                                        }
                                    </td>

                                    if (thead.NombreParametro.ToUpper() == "HISTAMINA")
                                    {
                                        var listaValor = (from x in Model
                                                          where x.Cocinador == row.COCINA.ToString() && x.Parada == row.PARADA && x.IdParametro == thead.IdParametro
                                                          select new { x.Valor }).ToList();


                                        <td class="text-right">@listaValor.OrderByDescending(x => x.Valor).Select(x => x.Valor).FirstOrDefault()</td>
                                        <td>@listaValor.OrderBy(x => x.Valor).Select(x => x.Valor).FirstOrDefault()</td>
                                    }
                                    else
                                    {
                                        <td class="text-right">
                                            @{
                                                var sum = (from x in Model
                                                           where x.Cocinador == row.COCINA.ToString() && x.Parada == row.PARADA && x.IdParametro == thead.IdParametro
                                                           select x.Valor).ToList();
                                                decimal average = 0;
                                                if (sum.Any())
                                                {
                                                    average = sum.Where(a => a.Value != 0)
                                                  .Select(a => Convert.ToDecimal(a.Value))
                                                  .DefaultIfEmpty(0)
                                                  .Average();
                                                }
                                            }

                                            @average.ToString("0.00")
                                        </td>
                                    }
                                }
                            }
                            <td>
                                @existeDetalle.UsuarioIngresoLog
                            </td>
                        </tr>
                    }

                }
                else
                {
                    foreach (var item in listaCocinaParada)
                    {
                        int con2 = item.COCHES + con1 - 1;
                        con1 = con1 + item.COCHES;
                    }
                }
            }
        </tbody>
        <tfoot style="font-size:10px">
            <tr>
                @{ tfoot += 8;
                    var listaValue = (from x in Model
                                      where x.IdParametro == idParametro
                                      select new { x.Valor }).ToList();

                    if (idParametro != 0)
                    {
                        <td colspan="@tfoot">
                            <b>
                                HISTAMINA MAX: @listaValue.OrderByDescending(x => x.Valor).Select(x => x.Valor).FirstOrDefault()<br />
                                HISTAMINA MIN: @listaValue.OrderBy(x => x.Valor).Select(x => x.Valor).FirstOrDefault()
                            </b>
                        </td>
                    }
                }
            </tr>
        </tfoot>
    </table>
</div>

<div class="card-footer divFooter ">
    <br />
    <table class="table table-borderless text-center">
        <tr>
            <td>
                <label style="border-bottom:solid 1px" id="txtUsuarioCreacion"></label> <br />
                <label>Realizado Por</label><br />
                <label id="txtFechaCreacion"></label>
            </td>
            <td>
                <label id="txtUsuarioAprobacion"></label><br />
                <label style="border-top:solid 1px">Aprobado Por</label><br />
                <label id="txtFechaAprobacion"></label>
            </td>
        </tr>
    </table>
</div>



@{
    var listFotos = (from x in Model
                     group x by new { x.ObservacionFoto, x.IdFoto, x.RutaFoto, x.Rotation, x.Cocinador, x.Parada, x.Turno } into v
                     select new { v.Key.ObservacionFoto, v.Key.IdFoto, v.Key.RutaFoto, v.Key.Rotation, v.Key.Parada, v.Key.Cocinador, v.Key.Turno }).ToList();
    int con = 0;
}
@foreach (var item in listFotos)
{
    if (item.Turno == ViewBag.Turno)
    {
        if (con == 0)
        {
            <div class="pagebreak"></div>
            break;
        }
        con++;
    }
}
         <div class="row align-center text-uppercase " style="margin:0px;padding:0px;" >
             @foreach (var item in listFotos)
             {
                 if (item.RutaFoto != null)
                 {

                     <div style="width:270px;margin:0px;" >
                         <div id="header_@item.IdFoto">
                             <img src="@ViewBag.Path@item.RutaFoto" id="@item.IdFoto" border: 1px solid #ddd;" onclick="window.open(this.src)" class="card-img-bottom img " alt="...">
                         </div>
                         <script>
                            validarImg('@item.Rotation','@item.IdFoto','@item.RutaFoto');
                         </script>
                         <div >
                             <label class="card-text" style="color:black;font-size:10px;white-space:normal;"><b>COCINADOR: </b> @item.Cocinador</label><br id="brOcultar"/>
                             <label class="card-text floatLabel" style="color:black;font-size:10px;white-space:normal;"><b>PARADA: </b> @item.Parada</label><br />
                             <label class="card-text" style="color:black;font-size:10px;white-space:normal; padding-left:0.5px"><b>OBSERVACIÓN: </b> @item.ObservacionFoto</label><br />
                         </div>
                     </div>
                 }
             }
         </div>
         <style>
             .img {
                 border: 1px solid #ddd;
                 border-radius: 4px;
                 padding: 5px;
                 width: 250px;
             }

                 .img:hover {
                     box-shadow: 0 0 2px 1px rgba(0, 140, 186, 0.5);
                 }
         </style>
<input type="hidden" class="btn btn-primary" value="@ViewBag.Path" id="btnPath" />
